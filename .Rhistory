knitr::opts_chunk$set(echo = TRUE)
# cargar librerias necesarias
# cargar los datos (ubicada en ./data/wdbc.data)
data <- read.csv("./data/wdbc.data", header = FALSE)
# generar encabezado de los datos
# Atributos base
features <- c("radius", "texture", "perimeter", "area", "smoothness",
"compactness", "concavity", "concave_points", "symmetry", "fractal_dimension")
# Generar nombres por bloques
mean_names <- paste(features, "mean", sep = "_")
se_names <- paste(features, "se", sep = "_")
worst_names <- paste(features, "worst", sep = "_")
# Todos los nombres completos
column_names <- c("id", "diagnosis", mean_names, se_names, worst_names)
# Asignar nombres a las columnas
colnames(data) <- column_names
# Revisar la estructura de los datos
str(data)
# revisar dimensiones
dim(data)
# revisar valores faltantes
summary(data)
#install.packages("ggplot2")
# graficar diagnosis
library(ggplot2)
ggplot(data, aes(x = diagnosis)) +
geom_bar(fill = c("#FF6666", "#66CC99")) +
labs(title = "Distribución de Diagnosis", x = "Tipo", y = "Cantidad")
# graficar histogramas
features <- c("radius_mean", "area_mean", "concavity_mean", "compactness_mean")
for (f in features) {
ggplot(data, aes_string(x = f)) +
geom_histogram(bins = 30, fill = "#69b3a2", color = "white") +
labs(title = paste("Histograma de", f)) +
theme_minimal() +
print()
}
# graficar histogramas
features <- c("radius_mean", "area_mean", "concavity_mean", "compactness_mean")
for (f in features) {
ggplot(data, aes_string(x = f)) +
geom_histogram(bins = 30, fill = "#69b3a2", color = "white") +
labs(title = paste("Histograma de", f)) +
theme_minimal() +
print()
}
library(ggplot2)
library(patchwork)
install.packages("patchwork")
#install.packages("patchwork")
library(ggplot2)
library(patchwork)
plots <- list()
for (f in features) {
plots[[f]] <- ggplot(data, aes(x = .data[[f]])) +
geom_histogram(bins = 30, fill = "#69b3a2", color = "white") +
labs(title = paste("Histograma de", f)) +
theme_minimal()
}
# Combinar todos los gráficos
wrap_plots(plots, ncol = 2)  # 2 columnas
# Histogramas de variables numéricas
#install.packages("patchwork")
library(ggplot2)
library(patchwork)
plots <- list()
for (f in features) {
plots[[f]] <- ggplot(data, aes(x = .data[[f]])) +
geom_histogram(bins = 30, fill = "#69b3a2", color = "white") +
labs(title = paste("Histograma de", f)) +
theme_minimal()
}
# Combinar todos los gráficos
wrap_plots(plots, ncol = 2)  # 2 columnas
# Histogramas de variables numéricas
#install.packages("patchwork")
library(ggplot2)
library(patchwork)
plots <- list()
for (f in features) {
plots[[f]] <- ggplot(data, aes(x = .data[[f]])) +
geom_histogram(bins = 30, fill = "#69b3a2", color = "white") +
labs(title = paste("Histograma de", f)) +
theme_minimal()
}
# Combinar todos los gráficos
wrap_plots(plots, ncol = 4)  # 2 columnas
# Histogramas de variables numéricas
#install.packages("patchwork")
library(ggplot2)
library(patchwork)
plots <- list()
for (f in features) {
plots[[f]] <- ggplot(data, aes(x = .data[[f]])) +
geom_histogram(bins = 30, fill = "#69b3a2", color = "white") +
labs(title = paste("Histograma de", f)) +
theme_minimal()
}
# Combinar todos los gráficos
wrap_plots(plots, ncol = 2)  # 2 columnas
# Histogramas de variables numéricas
#install.packages("patchwork")
library(ggplot2)
library(patchwork)
features <- c("radius_mean", "area_mean", "concavity_mean", "compactness_mean")
plots <- list()
for (f in features) {
plots[[f]] <- ggplot(data, aes(x = .data[[f]])) +
geom_histogram(bins = 30, fill = "#69b3a2", color = "white") +
labs(title = paste("Histograma de", f)) +
theme_minimal()
}
# Combinar todos los gráficos
wrap_plots(plots, ncol = 2)  # 2 columnas
# Histogramas de variables numéricas
#install.packages("patchwork")
library(ggplot2)
library(patchwork)
features <- c("radius_mean", "area_mean", "concavity_mean")
plots <- list()
for (f in features) {
plots[[f]] <- ggplot(data, aes(x = .data[[f]])) +
geom_histogram(bins = 30, fill = "#69b3a2", color = "white") +
labs(title = paste("Histograma de", f)) +
theme_minimal()
}
# Combinar todos los gráficos
wrap_plots(plots, ncol = 2)  # 2 columnas
# Histogramas de variables numéricas
#install.packages("patchwork")
library(ggplot2)
library(patchwork)
features <- c("radius_mean", "area_mean", "concavity_mean", "compactness_mean", "concave_points_mean", "perimeter_mean", "area_mean")
plots <- list()
for (f in features) {
plots[[f]] <- ggplot(data, aes(x = .data[[f]])) +
geom_histogram(bins = 30, fill = "#69b3a2", color = "white") +
labs(title = paste("Histograma de", f)) +
theme_minimal()
}
# Combinar todos los gráficos
wrap_plots(plots, ncol = 2)  # 2 columnas
# Histogramas de variables numéricas
#install.packages("patchwork")
library(ggplot2)
library(patchwork)
features <- c("radius_mean", "area_mean", "concavity_mean", "compactness_mean", "concave_points_mean", "perimeter_mean", "area_mean")
plots <- list()
for (f in features) {
plots[[f]] <- ggplot(data, aes(x = .data[[f]])) +
geom_histogram(bins = 30, fill = "#69b3a2", color = "white") +
labs(title = paste("Histograma de", f)) +
theme_minimal()
}
# Combinar todos los gráficos
wrap_plots(plots, ncol = 2)  # 2 columnas
# Boxplots de variables numéricas por diagnóstico
boxplots <- list()
for (f in features) {
boxplots[[f]] <- ggplot(data, aes(x = diagnosis, y = .data[[f]], fill = diagnosis)) +
geom_boxplot() +
labs(title = paste("Boxplot de", f, "por diagnóstico")) +
theme_minimal()
}
# Boxplots de variables numéricas por diagnóstico
boxplots <- list()
for (f in features) {
boxplots[[f]] <- ggplot(data, aes(x = diagnosis, y = .data[[f]], fill = diagnosis)) +
geom_boxplot() +
labs(title = paste("Boxplot de", f, "por diagnóstico")) +
theme_minimal()
}
# Boxplots de variables numéricas por diagnóstico
boxplots <- list()
for (f in features) {
boxplots[[f]] <- ggplot(data, aes(x = diagnosis, y = .data[[f]], fill = diagnosis)) +
geom_boxplot() +
labs(title = paste("Boxplot de", f, "por diagnóstico")) +
theme_minimal()
}
library(ggplot2)
ggplot(data, aes(x = radius_mean, y = area_mean, color = diagnosis)) +
geom_point(alpha = 0.6) +
labs(title = "Radio vs Área según diagnóstico") +
theme_minimal()
ggplot(data, aes(x = concavity_mean, y = compactness_mean, color = diagnosis)) +
geom_point(alpha = 0.6) +
labs(title = "Concavidad vs Compacidad según diagnóstico") +
theme_minimal()
cor(data$radius_mean, data$area_mean)
cor(data$concavity_mean, data$compactness_mean)
library(corrplot)
install.packages("corrplot")
#install.packages("corrplot")
library(corrplot)
# Eliminar columnas no numéricas
numeric_data <- data[sapply(data, is.numeric)]
corr_matrix <- cor(numeric_data)
corrplot(corr_matrix, method = "color", type = "lower", tl.cex = 0.6)
# cargar librerias necesarias
# cargar los datos (ubicada en ./data/wdbc.data)
data <- read.csv("./data/wdbc.data", header = FALSE)
# generar encabezado de los datos
# Atributos base
features <- c("radius", "texture", "perimeter", "area", "smoothness",
"compactness", "concavity", "concave_points", "symmetry", "fractal_dimension")
# Generar nombres por bloques
mean_names <- paste(features, "mean", sep = "_")
se_names <- paste(features, "se", sep = "_")
worst_names <- paste(features, "worst", sep = "_")
# Todos los nombres completos
column_names <- c("id", "diagnosis", mean_names, se_names, worst_names)
# Asignar nombres a las columnas
colnames(data) <- column_names
# Revisar la estructura de los datos
str(data)
# revisar dimensiones
dim(data)
# revisar valores faltantes
summary(data)
#install.packages("ggplot2")
# graficar diagnosis
library(ggplot2)
ggplot(data, aes(x = diagnosis)) +
geom_bar(fill = c("#FF6666", "#66CC99")) +
labs(title = "Distribución de Diagnosis", x = "Tipo", y = "Cantidad")
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
# graficar diagnosis
library(ggplot2)
ggplot(data, aes(x = diagnosis)) +
geom_bar(fill = c("#FF6666", "#66CC99")) +
labs(title = "Distribución de Diagnosis", x = "Tipo", y = "Cantidad")
# Histogramas de variables numéricas
#install.packages("patchwork")
library(ggplot2)
library(patchwork)
features <- c("radius_mean", "area_mean", "concavity_mean", "compactness_mean", "concave_points_mean", "perimeter_mean", "area_mean")
plots <- list()
for (f in features) {
plots[[f]] <- ggplot(data, aes(x = .data[[f]])) +
geom_histogram(bins = 30, fill = "#69b3a2", color = "white") +
labs(title = paste("Histograma de", f)) +
theme_minimal()
}
# Combinar todos los gráficos
wrap_plots(plots, ncol = 2)  # 2 columnas
library(ggplot2)
ggplot(data, aes(x = radius_mean, y = area_mean, color = diagnosis)) +
geom_point(alpha = 0.6) +
labs(title = "Radio vs Área según diagnóstico") +
theme_minimal()
ggplot(data, aes(x = concavity_mean, y = compactness_mean, color = diagnosis)) +
geom_point(alpha = 0.6) +
labs(title = "Concavidad vs Compacidad según diagnóstico") +
theme_minimal()
cor(data$radius_mean, data$area_mean)
cor(data$concavity_mean, data$compactness_mean)
#install.packages("corrplot")
library(corrplot)
# Eliminar columnas no numéricas
numeric_data <- data[sapply(data, is.numeric)]
corr_matrix <- cor(numeric_data)
corrplot(corr_matrix, method = "color", type = "lower", tl.cex = 0.6)
library(ggplot2)
ggplot(data, aes(x = diagnosis, y = radius_mean, fill = diagnosis)) +
geom_violin(trim = FALSE, alpha = 0.6) +
labs(title = "Distribución de Radius Mean según diagnóstico") +
theme_minimal()
library(ggplot2)
ggplot(data, aes(x = diagnosis, y = radius_mean, fill = diagnosis)) +
geom_violin(trim = FALSE, alpha = 0.6) +
labs(title = "Distribución de Radius Mean según diagnóstico") +
theme_minimal()
ggplot(data, aes(x = radius_mean, color = diagnosis, fill = diagnosis)) +
geom_density(alpha = 0.3) +
labs(title = "Density plot de Radius Mean por diagnóstico") +
theme_minimal()
library(ggplot2)
ggplot(data, aes(x = diagnosis, y = radius_mean, fill = diagnosis)) +
geom_violin(trim = FALSE, alpha = 0.6) +
labs(title = "Distribución de Radius Mean según diagnóstico") +
theme_minimal()
ggplot(data, aes(x = radius_mean, color = diagnosis, fill = diagnosis)) +
geom_density(alpha = 0.3) +
labs(title = "Density plot de Radius Mean por diagnóstico") +
theme_minimal()
# Variables de interés
vars <- c("radius_mean", "area_mean", "concavity_mean", "compactness_mean")
# Reorganizar el dataframe a formato largo (long format)
library(tidyr)
install.packages("tidyr")
library(ggplot2)
ggplot(data, aes(x = diagnosis, y = radius_mean, fill = diagnosis)) +
geom_violin(trim = FALSE, alpha = 0.6) +
labs(title = "Distribución de Radius Mean según diagnóstico") +
theme_minimal()
ggplot(data, aes(x = radius_mean, color = diagnosis, fill = diagnosis)) +
geom_density(alpha = 0.3) +
labs(title = "Density plot de Radius Mean por diagnóstico") +
theme_minimal()
# Variables de interés
vars <- c("radius_mean", "area_mean", "concavity_mean", "compactness_mean")
# Reorganizar el dataframe a formato largo (long format)
#install.packages("tidyr")
library(tidyr)
long_data <- pivot_longer(data, cols = all_of(vars), names_to = "variable", values_to = "valor")
# Density plot facetado
ggplot(long_data, aes(x = valor, fill = diagnosis)) +
geom_density(alpha = 0.3) +
facet_wrap(~variable, scales = "free") +
labs(title = "Distribuciones por variable y diagnóstico") +
theme_minimal()
install.packages(c("ggplot2", "FactoMineR", "factoextra", "dplyr"))
library(ggplot2)
library(FactoMineR)
knitr::opts_chunk$set(echo = TRUE)
#install.packages(c("ggplot2", "FactoMineR", "factoextra", "dplyr"))
library(ggplot2)
library(FactoMineR)
library(factoextra)
library(dplyr)
# Convertir diagnosis a factor
data$diagnosis <- as.factor(data$diagnosis)
# Seleccionar solo variables numéricas
data_numeric <- data[, 3:ncol(data)]  # Quita id y diagnosis
# Ejecutar PCA
pca_result <- PCA(data_numeric, graph = FALSE)
# Visualización con color por diagnóstico
fviz_pca_ind(pca_result,
geom.ind = "point",
col.ind = data$diagnosis,
palette = c("#00AFBB", "#FC4E07"),
addEllipses = TRUE,
legend.title = "Diagnóstico") +
ggtitle("PCA de Tumores de Mama (2 primeros componentes)")
#install.packages(c("ggplot2", "FactoMineR", "factoextra", "dplyr"))
library(ggplot2)
library(FactoMineR)
library(factoextra)
library(dplyr)
# Convertir diagnosis a factor
data$diagnosis <- as.factor(data$diagnosis)
# Seleccionar solo variables numéricas
data_numeric <- data[, 3:ncol(data)]  # Quita id y diagnosis
# Ejecutar PCA
pca_result <- PCA(data_numeric, graph = FALSE)
# Visualización con color por diagnóstico
fviz_pca_ind(pca_result,
geom.ind = "point",
col.ind = data$diagnosis,
palette = c("#00AFBB", "#FC4E07"),
addEllipses = TRUE,
legend.title = "Diagnóstico") +
ggtitle("PCA de Tumores de Mama (2 primeros componentes)")
# Ver cómo contribuye cada variable al primer componente
fviz_contrib(pca_result, choice = "var", axes = 1, top = 10) +
ggtitle("Contribución al Componente Principal 1")
# Boxplots de variables numéricas por diagnóstico
ggplot(data, aes(x = diagnosis, y = radius_mean, fill = diagnosis)) +
geom_boxplot(alpha = 0.7) +
labs(title = "Distribución de radius_mean según diagnóstico",
x = "Diagnóstico", y = "Radio promedio") +
theme_minimal()
# Boxplots de variables numéricas por diagnóstico
ggplot(data, aes(x = diagnosis, y = radius_mean, fill = diagnosis)) +
geom_boxplot(alpha = 0.7) +
labs(title = "Distribución de radius_mean según diagnóstico",
x = "Diagnóstico", y = "Radio promedio") +
theme_minimal()
ggplot(data, aes(x = diagnosis, y = area_mean, fill = diagnosis)) +
geom_boxplot(alpha = 0.7) +
labs(title = "Distribución de area_mean según diagnóstico",
x = "Diagnóstico", y = "Área promedio") +
theme_minimal()
ggplot(data, aes(x = diagnosis, y = concavity_mean, fill = diagnosis)) +
geom_boxplot(alpha = 0.7) +
labs(title = "Distribución de concavity_mean según diagnóstico",
x = "Diagnóstico", y = "Concavidad promedio") +
theme_minimal()
ggplot(data, aes(x = diagnosis, y = compactness_mean, fill = diagnosis)) +
geom_boxplot(alpha = 0.7) +
labs(title = "Distribución de compactness_mean según diagnóstico",
x = "Diagnóstico", y = "Compacidad promedio") +
theme_minimal()
# Boxplots de variables numéricas por diagnóstico
# Convierte a formato largo para facetar
box_data <- data %>%
select(diagnosis, all_of(variables)) %>%
pivot_longer(cols = -diagnosis, names_to = "variable", values_to = "valor")
# Boxplots de variables numéricas por diagnóstico
# Variables que quieres graficar
variables <- c("radius_mean", "area_mean", "concavity_mean", "compactness_mean")
# Nombres más amigables para los títulos y ejes Y
titulos <- c("Radio promedio", "Área promedio", "Concavidad promedio", "Compacidad promedio")
# Bucle para generar y mostrar los gráficos
for (i in seq_along(variables)) {
p <- ggplot(data, aes_string(x = "diagnosis", y = variables[i], fill = "diagnosis")) +
geom_boxplot(alpha = 0.7) +
labs(
title = paste("Distribución de", variables[i], "según diagnóstico"),
x = "Diagnóstico",
y = titulos[i]
) +
theme_minimal()
print(p)
}
# Boxplots de variables numéricas por diagnóstico
ggplot(data, aes(x = diagnosis, y = radius_mean, fill = diagnosis)) +
geom_boxplot(alpha = 0.7) +
labs(title = "Distribución de radius_mean según diagnóstico",
x = "Diagnóstico", y = "Radio promedio") +
theme_minimal()
ggplot(data, aes(x = diagnosis, y = area_mean, fill = diagnosis)) +
geom_boxplot(alpha = 0.7) +
labs(title = "Distribución de area_mean según diagnóstico",
x = "Diagnóstico", y = "Área promedio") +
theme_minimal()
ggplot(data, aes(x = diagnosis, y = concavity_mean, fill = diagnosis)) +
geom_boxplot(alpha = 0.7) +
labs(title = "Distribución de concavity_mean según diagnóstico",
x = "Diagnóstico", y = "Concavidad promedio") +
theme_minimal()
ggplot(data, aes(x = diagnosis, y = compactness_mean, fill = diagnosis)) +
geom_boxplot(alpha = 0.7) +
labs(title = "Distribución de compactness_mean según diagnóstico",
x = "Diagnóstico", y = "Compacidad promedio") +
theme_minimal()
